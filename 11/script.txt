Alright, let’s talk about something super useful in Go — the defer keyword.

Now, what does defer actually do? In simple words, it tells Go: “Hey, don’t run this line right now — run it later, when the current function is just about to finish.”

Think of it like this — you're wrapping up your work at the office. Before leaving, you lock your computer, clean your desk, and switch off the light. These are all cleanup tasks you do after you're done working, but you still want to make sure they happen — no matter what.

In Go, defer helps you do that. You use it when you want some code to run at the very end of a function. This is really handy for things like:

Closing files after reading or writing,

Unlocking something you previously locked,

Or even logging a message right before leaving a function.

So instead of remembering to clean up at the end, you just defer it early on — and Go takes care of running it later. Super neat, right?

And trust me, this can save you from bugs, especially in big programs where you might forget to close something or release a resource.



========================================================================


Let’s look at a very simple example of how defer works in Go.

Here’s a small Go program. Let me walk you through it line by line.

We start with:

go
Copy
Edit
package main
This just tells Go that this is the main package — where our program starts.

Next:

go
Copy
Edit
import "fmt"
We’re importing the fmt package — that’s short for format — and it gives us access to functions like Println for printing output to the console.

Now here’s where the real action happens:

go
Copy
Edit
func main() {
This is the main function — the entry point of any Go program.

Inside it, we have this line:

go
Copy
Edit
defer fmt.Println("World")
So here, we’re deferring the print statement "World". That means Go won’t run this line right now. It will wait until the main function is just about to end, and then it’ll run it.

Then we have:

go
Copy
Edit
fmt.Println("Hello")
This one runs immediately. So first "Hello" will be printed.

And after that, since main() is about to finish, Go says — “Oh right, I had a deferred line!” — and it runs:

go
Copy
Edit
fmt.Println("World")
So the output is:

nginx
Copy
Edit
Hello
World
Even though "World" is written before "Hello" in the code, it runs after — because of the defer.

So remember: defer pushes that line to the end of the function. It's like saying, “Run this later, right before we leave.”

This is super useful for things like closing files or releasing resources — stuff you always want to do at the end, no matter what happens in the function.


===================================================


Alright, now let’s understand how defer actually works behind the scenes.

So, when you use multiple defer statements in your function, Go doesn’t just run them randomly — it follows a very specific rule.

All deferred functions are stored in something called a stack. And if you’ve heard about stacks in data structures, you probably remember — it’s Last In, First Out, or LIFO.

That means the last deferred function you wrote in your code will be the first one to run when the function ends.

Let’s take a simple real-life example. Imagine you're stacking your notebooks one on top of another — first a Physics notebook, then Chemistry, and finally Maths. Now when you want to pick them up again, you’ll obviously lift the Maths notebook first, right? Because it's on the top. That’s how a stack works — last one in, first one out.

So in Go, if you defer multiple things, the one you wrote last will be the first to execute when your function is exiting.

Now, why is this useful?

It’s especially handy when you're doing cleanup — like maybe you opened multiple files or locked multiple resources, and you need to close or unlock them in reverse order. Defer makes that really easy and safe.

And since Go does this automatically for you using a stack, you don’t have to manually track or remember the cleanup order — it just works.

Pretty neat, right?



==========================================================


Now let’s see what happens when you use multiple defer statements in a function.

Here’s a small function called demo. Inside it, we’re deferring three print statements:

go
Copy
Edit
defer fmt.Println("Third")
defer fmt.Println("Second")
defer fmt.Println("First")
Now, you might be thinking — will this print “Third, Second, First”? Because that’s the order we wrote them, right?

But no — this is where the LIFO concept we just discussed comes into play.

Go stores these deferred calls in a stack. So the last defer you write is the first one to get executed when the function ends.

Let’s break it down:

"First" is deferred last, so it gets executed first.

"Second" was deferred just before that, so it runs second.

"Third" was deferred first, so it runs last.

So the output is:

sql
Copy
Edit
First  
Second  
Third
Even though it feels backward, this reverse execution order is actually really helpful.

Let’s say you were opening files or starting some tasks — and you want to close or clean them up in the reverse order. That’s exactly where defer with LIFO behavior shines.

So don’t worry if the order looks flipped — that’s how it’s supposed to work, and Go handles it for you automatically.




============================================================


🟦 Slide Title: Common use cases for defer
🎙️ Script (Conversational & Beginner-Friendly):

Now let’s see where defer is actually used in real-world Go code. This is where things get practical.

Here are four common use cases that you'll definitely run into, especially once you start working on real projects.

Let’s go through them one by one.

🔹 First — Closing files

Once you open a file in Go, you should always close it. But sometimes, if your code is long or has multiple return points, you might forget.

That’s where defer helps. You just write:

go
Copy
Edit
defer file.Close()
right after opening the file. And boom — Go will automatically close it when your function finishes, no matter what. No forgetting, no leaks.

🔹 Second — Unlocking a mutex

If you’re using goroutines and shared resources, you’ll often need to lock a mutex before accessing something.

Once you're done, you must unlock it. Again, instead of remembering to unlock at the end, you just say:

go
Copy
Edit
defer mu.Unlock()
Go handles the timing for you. Super useful when working with concurrency.

🔹 Third — Logging

Sometimes you want to log when a function ends — for debugging or tracking. You can write:

go
Copy
Edit
defer log.Println("Exiting function")
This will run at the very end of your function, so your logs stay clean and consistent.

🔹 And finally — Recovering from panic

This one’s a bit advanced, but very important.

In Go, when something goes terribly wrong, the program may panic. To safely recover, you can defer a function that handles it — like:

go
Copy
Edit
defer recover()
Of course, you'd usually wrap this in another function to do proper error handling. But the key idea is: defer makes recovery possible.

So these are not just textbook examples — these are things you'll see in real Go code, in actual jobs and interviews.

Just remember: defer is like telling Go — "Hey, do this later, but definitely do it."



==============================================================


Alright, now let’s look at a slightly tricky — but very interesting — use of defer with return values.

So here’s a function called test that returns an int. And something curious is happening inside it.

Let’s go step by step.

go
Copy
Edit
func test() (result int) {
We’re declaring a named return value here — result. This means result is already available inside the function, and whatever value it holds at the end will be returned.

Now comes the defer part:

go
Copy
Edit
defer func() {
    result++
}()
Here, we’re deferring a small anonymous function. And inside it, we’re incrementing result by 1.

Now here’s the key part — the function says:

go
Copy
Edit
return 1
So Go sets result to 1. But before the function actually returns that value to the caller, it runs any deferred functions. So our deferred function runs, and it does result++, changing result from 1 to 2.

So even though it looks like we’re returning 1, the final returned value is actually 2.

This might look confusing at first, but it’s very powerful. Just remember:
🟡 Deferred functions run after the return value is set, but before it’s returned.

That’s why in this case, result++ still affects the final result.

You won’t use this every day, but understanding it can really help — especially in interviews or while debugging tricky issues in production code.




==========================================================




Let’s now look at a real-world example — something you’ll definitely use if you're working with files in Go.

Here’s a function called readFile, and it takes a filename as input.

go
Copy
Edit
file, err := os.Open(filename)
This line tries to open the file. If the file exists and everything's fine, it returns a file handle. If there’s a problem — like the file doesn't exist — we get an error.

Next:

go
Copy
Edit
if err != nil {
    log.Fatal(err)
}
This checks if there was an error. If yes, we log it and stop the program. Simple enough.

Now comes the important part:

go
Copy
Edit
defer file.Close()
Right after we open the file successfully, we defer the Close() call. This means — don’t close the file right now. Wait until the readFile function is just about to end, and then close it.

Why is this useful?

Well, when you're working with files, it’s very important to release them properly after use. Otherwise, the program might lock the file, or you could run into memory issues — especially if your program is opening many files in a loop.

And here's the nice part: with defer, you don’t have to remember to close it at the end of your function. You can just put it right after opening, and you're safe — even if the function has multiple return paths or errors later on.

Then we have this comment:

go
Copy
Edit
// process file...
That’s where you’d write your logic to read the contents, scan lines, or do whatever your program needs.

So this is a very clean and safe way to handle resources — and it’s why defer is loved by Go developers.

Any time you're working with files, network connections, or databases — remember to use defer to clean things up automatically.





==========================================================



🟦 Slide Title: Important notes
🎙️ Script (Conversational & Beginner-Friendly):

Before we wrap up, here are a few important things you should definitely know about defer in Go. These are small points, but they can make a big difference in how your code behaves — especially when you're debugging or writing production code.

🔹 First — Deferred functions still run even if there's a panic.

That’s right. Even if something goes wrong in your code — like a runtime error or a panic — the deferred functions will still get executed.

Why does that matter?

Imagine you’ve opened a file or locked a resource. If your function panics in the middle, you still want to clean things up properly. Thanks to defer, that happens automatically. So you don’t leave your app or system in a broken state.

🔹 Second — Avoid deferring inside loops.

Now, this one’s a performance tip.

Let’s say you have a loop that runs 1000 times, and you defer something inside that loop. All of those deferred calls get stacked up — and that can slow things down or use more memory than needed.

Instead, it’s better to call the function directly inside the loop, or restructure your code to avoid unnecessary defers in that situation.

🔹 And third — Parameters in a defer are evaluated immediately.

This is super important and can be a bit tricky.

Even though the deferred function runs later, its arguments are calculated right away, at the time of the defer statement.

So if you’re deferring something like defer fmt.Println(x), and you change x later — it won’t matter. The old value of x will still be printed when the deferred function runs.

So always remember: the function runs later, but the values are locked in immediately.

These small details can save you from big bugs — especially when you're working with files, databases, or cleanup logic.

So just keep these three in mind, and you’ll be using defer like a pro!




==============================================================




Okay, so by now you’ve seen that defer is a pretty handy feature in Go — it helps clean up code and manage resources nicely.

But, like with most tools in programming, you shouldn’t overuse it. There are some situations where using defer might actually be a bad idea.

Let’s walk through them one by one.

🔹 First — High-performance loops

If you're running a tight loop, like iterating over thousands of items, avoid using defer inside that loop.

Why?

Because every time you defer something, Go adds a little bit of overhead. It’s not a huge problem for small loops, but in performance-critical code — like file processing, image rendering, or network operations — it can slow things down.

So in those cases, it's better to call the function directly instead of deferring it.

🔹 Second — Simple code blocks

If your code block is short and easy to follow, adding defer might just make it harder to read.

Imagine a small function that opens a file, writes a line, and closes it — all in three lines. If you throw a defer in there just for one thing, it can make the logic slightly harder to trace.

So don’t use defer just for the sake of it. Only use it when it genuinely helps manage complex logic or multiple return paths.

🔹 Third — Large files with many operations

In some cases, like processing a very large file with many reads and writes, it's better to manually control when you close the file.

Why?

Because if you defer the close, it only runs after the entire function ends. But maybe you want to close the file earlier and move on — especially if you’re dealing with multiple files in the same function.

In such cases, explicit resource management gives you better control over when things get cleaned up.

So while defer is super helpful, it's not always the best choice. Knowing when not to use it is just as important as knowing when to use it.

Use your judgment — and with experience, you'll know exactly when defer makes your code cleaner, and when it doesn't.

So that’s a wrap on the defer keyword in Go!

We saw what defer does, how it works with return values, the order of execution, and when you should or shouldn’t use it.

If you’re just starting out with Golang, don’t worry about memorizing everything right now. Just remember — defer is your friend when it comes to cleaning up and keeping your code safe and readable.

You’ll see it a lot when working with files, databases, APIs, or even in interviews — so keep practicing and try writing a few small programs using it.

Thanks for sticking around and learning with me. If this helped you, do consider checking out the next videos in the series where we’ll cover more Go concepts in the same simple way.

Until then — happy coding and see you in the next one! 👋