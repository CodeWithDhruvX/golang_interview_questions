[
  {
    "title": "Introduction to Zero Value in Go",
    "content": "In Go, every variable is automatically assigned a default value when it is declared but not explicitly initialized.\nThis default is known as the **zero value**.\nUnlike some languages where uninitialized variables may lead to unpredictable behavior, Go ensures safety and reliability by always initializing variables.\nThis behavior helps prevent bugs and makes the language more beginner-friendly.",
    "slide_type": "text"
  },
  {
    "title": "Why Zero Value Matters",
    "content": "- ‚úÖ Helps prevent undefined or garbage values that may occur in other programming languages\n- üõ°Ô∏è Makes code safer by ensuring variables always start with a known state\n- üí° Supports Go's design philosophy of simplicity, safety, and readability\n- üß† Encourages writing predictable and bug-resistant code without extra effort\n- üß∞ Especially useful when working with structs, arrays, or large programs where forgetting to initialize can cause subtle issues",
    "slide_type": "text"
  },
  {
    "title": "Zero Value Table",
    "content": [
      { "Type": "int", "Zero Value": "0" },
      { "Type": "float64", "Zero Value": "0.0" },
      { "Type": "bool", "Zero Value": "false" },
      { "Type": "string", "Zero Value": "\"\"" },
      { "Type": "pointer", "Zero Value": "nil" },
      { "Type": "slice", "Zero Value": "nil" },
      { "Type": "map", "Zero Value": "nil" },
      { "Type": "channel", "Zero Value": "nil" },
      { "Type": "interface", "Zero Value": "nil" },
      { "Type": "function", "Zero Value": "nil" }
    ],
    "slide_type": "table"
  },
  {
    "title": "Quick Challenge: Test Your Understanding",
    "content": "1. What is the zero value of a `bool` variable in Go?\n   - A. true  \n   - B. false  \n   - C. 0  \n   - D. nil\n\n2. What will be printed?\n```go\nvar s string\nfmt.Println(s)\n```\n   - A. nil  \n   - B. empty string  \n   - C. undefined  \n   - D. error\n\n3. Which of the following types has `nil` as its zero value?\n   - A. string  \n   - B. int  \n   - C. map  \n   - D. bool\n\n4. What is the output?\n```go\nvar nums []int\nfmt.Println(nums == nil)\n```\n   - A. true  \n   - B. false  \n   - C. error  \n   - D. []\n",
    "slide_type": "code"
  },
  {
    "title": "Solutions: Quick Challenge",
    "content": "```go\n// 1. Correct answer: B. false\n// Explanation: Zero value of bool is false.\n\n// 2. Correct answer: B. empty string\n// Explanation: string zero value is \"\" (empty string).\n\n// 3. Correct answer: C. map\n// Explanation: map is a reference type; its zero value is nil.\n\n// 4. Correct answer: A. true\n// Explanation: Uninitialized slice is nil, so nums == nil is true.\n```",
    "slide_type": "code"
  }
]
