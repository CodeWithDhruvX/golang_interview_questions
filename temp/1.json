[
  {
    "topic": "What are pointers in Go?",
    "slides": [
      {
        "title": "🚀 Myth: Go has no pointers!",
        "content": "Many beginners think Go doesn't have pointers like C/C++. Truth? Go **does** have pointers — just no pointer arithmetic.",
        "slide_type": "text"
      },
      {
        "title": "📦 Think of pointers as...",
        "content": "A **home address** for your data. Instead of carrying the whole house (value), you just give the **address**.",
        "slide_type": "text"
      },
      {
        "title": "🖥 Basic Pointer Example",
        "content": "```go\npackage main\nimport \"fmt\"\n\nfunc main() {\n    x := 42\n    p := &x // pointer to x\n    fmt.Println(p)  // memory address\n    fmt.Println(*p) // value at address\n}\n```",
        "slide_type": "code"
      },
      {
        "title": "🤯 Why care about pointers?",
        "content": "- Avoid copying large data\n- Allow functions to modify values\n- Work with dynamic structures",
        "slide_type": "text"
      },
      {
        "title": "⏭ Next up...",
        "content": "How to **declare & use pointers** without confusion.",
        "slide_type": "text"
      }
    ]
  },
  {
    "topic": "How do you declare and use pointers?",
    "slides": [
      {
        "title": "🎯 Hook: Pointers look scary, but...",
        "content": "In Go, they are **simpler** than you think. One symbol does all the magic.",
        "slide_type": "text"
      },
      {
        "title": "✏ Declaring a pointer",
        "content": "```go\nvar p *int // p is a pointer to int\n```",
        "slide_type": "code"
      },
      {
        "title": "🔧 Using & and *",
        "content": "```go\nx := 10\np := &x  // & gives address\nfmt.Println(*p) // * gets value\n*p = 20\nfmt.Println(x) // now 20\n```",
        "slide_type": "code"
      },
      {
        "title": "💡 Tip",
        "content": "Think `&` = **address-of**, `*` = **value-at**.",
        "slide_type": "text"
      },
      {
        "title": "⏭ Next up...",
        "content": "Pointer vs Value Receivers — why it matters for methods.",
        "slide_type": "text"
      }
    ]
  },
  {
    "topic": "What is the difference between pointer and value receivers?",
    "slides": [
      {
        "title": "🛑 Common mistake",
        "content": "Using a **value receiver** when you meant to update the original struct.",
        "slide_type": "text"
      },
      {
        "title": "📦 Value Receiver Example",
        "content": "```go\npackage main\nimport \"fmt\"\n\ntype Person struct {name string}\n\nfunc (p Person) changeName(newName string) {\n    p.name = newName // copy updated\n}\n\nfunc main() {\n    a := Person{\"Alice\"}\n    a.changeName(\"Bob\")\n    fmt.Println(a.name) // still Alice\n}\n```",
        "slide_type": "code"
      },
      {
        "title": "📌 Pointer Receiver Example",
        "content": "```go\nfunc (p *Person) changeName(newName string) {\n    p.name = newName // updates original\n}\n\nfunc main() {\n    a := Person{\"Alice\"}\n    a.changeName(\"Bob\")\n    fmt.Println(a.name) // Bob\n}\n```",
        "slide_type": "code"
      },
      {
        "title": "💡 Quick Rule",
        "content": "- Use **pointer receiver** to modify data\n- Use **value receiver** for read-only ops",
        "slide_type": "text"
      },
      {
        "title": "⏭ Next up...",
        "content": "Go methods — not just for structs!",
        "slide_type": "text"
      }
    ]
  }
]
