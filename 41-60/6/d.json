[
    {
      "title": "Introduction to Empty Interface in Go",
      "content": "In Go, the **empty interface** is a special type that can hold values of *any type*. It is declared as:\n\n```go\ninterface{}\n```",
      "slide_type": "text"
    },
    {
      "title": "Why Use an Empty Interface?",
      "content": "- Flexibility: Accept any data type.\n- Useful for generic data structures like `map[string]interface{}`.\n- Helpful when you don't know the type in advance (e.g., JSON parsing).",
      "slide_type": "text"
    },
    {
      "title": "Declaration Example",
      "content": "```go\nvar x interface{}\nx = 42\nfmt.Println(x)\n\nx = \"hello\"\nfmt.Println(x)\n```",
      "slide_type": "code"
    },
    {
      "title": "Empty Interface in Functions",
      "content": "```go\nfunc describe(i interface{}) {\n    fmt.Printf(\"Type: %T, Value: %v\\n\", i, i)\n}\n\ndescribe(42)\ndescribe(\"GoLang\")\ndescribe(true)\n```",
      "slide_type": "code"
    },
    {
      "title": "Type Assertion with Empty Interface",
      "content": "```go\nvar i interface{} = \"Hello\"\ns := i.(string) // Type assertion\nfmt.Println(s)\n\n// Safe type assertion\ns, ok := i.(string)\nif ok {\n    fmt.Println(\"Assertion successful:\", s)\n}\n```",
      "slide_type": "code"
    },
    {
      "title": "Empty Interface Use Cases",
      "content": "- **Generic containers**: like maps and slices.\n- **APIs** that can accept multiple types.\n- **JSON unmarshalling** into flexible structures.\n- **Writing utility functions** like `PrintAnything(data interface{})`.",
      "slide_type": "text"
    },
    {
      "title": "Empty Interface: Pros and Cons",
      "content": [
        { "Pros": "Very flexible; can hold any value" },
        { "Cons": "Loses type safety; may cause runtime errors" },
        { "Pros": "Useful in generic programming" },
        { "Cons": "Requires type assertion or reflection to work with values" }
      ],
      "slide_type": "table"
    },
    {
      "title": "Small Challenge: Predict the Output",
      "content": "```go\npackage main\nimport \"fmt\"\n\nfunc main() {\n    var val interface{} = 100\n    fmt.Println(val)\n\n    val = \"interface in Go\"\n    fmt.Println(val)\n}\n```",
      "slide_type": "code"
    },
    {
      "title": "Quick Challenge: Test Your Understanding",
      "content": "### Questions:\n\n1. What keyword is used to define an empty interface in Go?\n2. True or False: An empty interface can store *only* string values.\n3. What happens if you assert the wrong type on an empty interface without checking?\n4. Where is an empty interface most commonly used?\n\n_Answer these in your mind before moving on!_",
      "slide_type": "text"
    },
    {
      "title": "Solutions: Quick Challenge",
      "content": "```markdown\n1. `interface{}`\n2. False - It can store any type.\n3. It will panic at runtime.\n4. Common in JSON parsing, generic containers, and flexible APIs.\n```",
      "slide_type": "code"
    }
  ]
  