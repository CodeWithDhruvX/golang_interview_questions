[
    {
      "title": "Introduction to Pointers",
      "content": "Pointers are variables that store the memory address of another variable. They allow indirect access and manipulation of values stored in memory.",
      "slide_type": "text"
    },
    {
      "title": "Declaring a Pointer",
      "content": "To declare a pointer:\n\n```go\nvar p *int\n```\n\n- `p` is a pointer to an integer.\n- `*int` means \"pointer to an int\".",
      "slide_type": "code"
    },
    {
      "title": "Assigning an Address to a Pointer",
      "content": "You use the `&` operator to get the address of a variable and assign it to a pointer:\n\n```go\nvar x int = 5\nvar p *int = &x\n```",
      "slide_type": "code"
    },
    {
      "title": "Dereferencing a Pointer",
      "content": "Dereferencing means accessing the value stored at the memory address. Use the `*` operator:\n\n```go\nfmt.Println(*p) // Output: 5\n```",
      "slide_type": "code"
    },
    {
      "title": "Pointers: Visual Example",
      "content": "Imagine memory like mailboxes. Each has an address.\n- `x` is the value in a mailbox.\n- `p` is the address (pointer) to the mailbox where `x` is stored.\n\nAccessing `*p` gives you what's inside the mailbox!",
      "slide_type": "text"
    },
    {
      "title": "Common Pointer Operations",
      "content": [
        { "Operation": "Declaration", "Syntax": "`var p *int`" },
        { "Operation": "Assignment", "Syntax": "`p = &variable`" },
        { "Operation": "Dereferencing", "Syntax": "`*p`" },
        { "Operation": "Printing address", "Syntax": "`fmt.Println(p)`" }
      ],
      "slide_type": "table"
    },
    {
      "title": "Pointers in Functions",
      "content": "You can pass pointers to functions to modify original variables:\n\n```go\nfunc increment(n *int) {\n  *n = *n + 1\n}\n\nfunc main() {\n  x := 5\n  increment(&x)\n  fmt.Println(x) // Output: 6\n}\n```",
      "slide_type": "code"
    },
    {
      "title": "Pointer Quiz: Guess the Output!",
      "content": "What will this code print?\n\n```go\nvar a int = 100\nvar b *int = &a\n*b = 200\nfmt.Println(a)\n```\n\n- A) 100\n- B) 200\n- C) Address of `a`",
      "slide_type": "text"
    },
    {
      "title": "Best Practices for Pointers",
      "content": "- Always check if a pointer is `nil` before dereferencing.\n- Use pointers when you need to modify data inside functions.\n- Keep your code readable: don't overuse pointers unless necessary.",
      "slide_type": "text"
    },
    {
      "title": "Quick Challenge: Test Your Understanding",
      "content": "- **Question:** What operator is used to get the address of a variable in Go?\n- **Question:** How do you dereference a pointer to get the value?\n\n*Tip: Try writing a small program to answer these!*",
      "slide_type": "text"
    },
    {
      "title": "Solutions: Quick Challenge",
      "content": "- **Answer 1:** Use the `&` operator to get the address of a variable.\n- **Answer 2:** Use the `*` operator to dereference a pointer and get its value.\n\nExample:\n```go\nvar x int = 10\nvar p *int = &x\nfmt.Println(*p) // Prints 10\n```",
      "slide_type": "code"
    }
  ]
  