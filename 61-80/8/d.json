[
    {
      "title": "Introduction to Select Statement",
      "content": "In Go, the `select` statement is used to handle multiple channels. It allows a goroutine to wait on multiple communication operations, blocking until one of the channels is ready.",
      "slide_type": "text"
    },
    {
      "title": "Syntax of Select Statement",
      "content": "The basic syntax of a `select` statement is:\n\n```go\nselect {\ncase <-ch1:\n    // Handle data from ch1\ncase <-ch2:\n    // Handle data from ch2\ndefault:\n    // Execute if no channel is ready\n}\n```",
      "slide_type": "code"
    },
    {
      "title": "How Select Works",
      "content": "The `select` statement blocks until one of its `case` conditions is met. It will then execute the code associated with the selected case. If no case is ready and a `default` is provided, the `default` case will execute immediately.",
      "slide_type": "text"
    },
    {
      "title": "Select with Multiple Cases",
      "content": "You can handle multiple channels with `select`. Each case represents a channel operation, such as receiving data or sending data. Go will pick the first channel that's ready.\n\n```go\nselect {\ncase msg1 := <-ch1:\n    fmt.Println(\"Received from ch1:\", msg1)\ncase msg2 := <-ch2:\n    fmt.Println(\"Received from ch2:\", msg2)\n}\n```",
      "slide_type": "code"
    },
    {
      "title": "Using Default Case",
      "content": "The `default` case in a `select` statement runs if none of the channels are ready. It's useful when you don't want to block waiting for a channel to become available.\n\n```go\nselect {\ncase msg := <-ch1:\n    fmt.Println(\"Received from ch1\", msg)\ndefault:\n    fmt.Println(\"No channels ready, running default\")\n}\n```",
      "slide_type": "code"
    },
    {
      "title": "Blocking with Select",
      "content": "Without a `default` case, the `select` statement will block until one of the channels is ready to proceed. This can be useful for synchronization and coordination of goroutines.\n\n```go\nselect {\ncase msg := <-ch1:\n    fmt.Println(\"Received message from ch1\")\n}\n```",
      "slide_type": "code"
    },
    {
      "title": "Practical Use of Select in Goroutines",
      "content": "In real-world applications, `select` is often used with goroutines to handle timeouts, cancellation signals, or processing multiple streams of data concurrently.\n\nExample with a timeout:\n\n```go\nselect {\ncase msg := <-ch1:\n    fmt.Println(\"Received from ch1\")\ncase <-time.After(2 * time.Second):\n    fmt.Println(\"Timeout exceeded\")\n}\n```",
      "slide_type": "code"
    },
    {
      "title": "Best Practices for Select",
      "content": "Here are some best practices for using the `select` statement in Go:\n- Always include a `default` case if you don't want to block.\n- Handle timeouts to prevent goroutines from hanging indefinitely.\n- Use `select` with multiple channels to efficiently manage concurrent tasks.",
      "slide_type": "text"
    },
    {
      "title": "Quick Challenge: Test Your Understanding",
      "content": "### Questions:\n1. What happens if no case in a `select` statement is ready and no `default` case is provided?\n2. How does the `select` statement help manage multiple channels in Go?\n3. What is the use of the `default` case in `select`?\n\nTry writing a small `select` example that handles a timeout.",
      "slide_type": "text"
    },
    {
      "title": "Solutions: Quick Challenge",
      "content": "### Answers:\n1. If no case is ready and no `default` case is provided, the `select` statement will block until one of the channels is ready.\n2. The `select` statement allows you to wait on multiple channels, blocking until one of the channels is ready. It helps manage concurrent operations.\n3. The `default` case runs immediately if none of the channels are ready.\n\nExample handling timeout:\n\n```go\nselect {\ncase msg := <-ch1:\n    fmt.Println(\"Received from ch1\")\ncase <-time.After(2 * time.Second):\n    fmt.Println(\"Timeout exceeded\")\n}\n```",
      "slide_type": "code"
    }
  ]
  