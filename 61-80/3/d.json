[
    {
      "title": "What is a Channel in Go?",
      "content": "In Go, a **channel** is a powerful feature that allows goroutines to communicate with each other and synchronize their execution. Channels provide a way for goroutines to send and receive data safely.",
      "slide_type": "text"
    },
    {
      "title": "Why Channels Are Useful",
      "content": "Channels are used to:\n\n- **Send data** between goroutines.\n- **Synchronize** goroutines by blocking until data is received.\n- Ensure **safe communication** without the need for explicit locks or mutexes.",
      "slide_type": "text"
    },
    {
      "title": "Creating a Channel",
      "content": "Channels are created using the `make` function. Here's the syntax:\n\n```go\nch := make(chan int)\n```\nThis creates a channel of type `int` that can carry integers.\n\nYou can also create buffered channels:\n\n```go\nch := make(chan int, 2)\n```\nThis creates a channel that can hold up to two values at once.",
      "slide_type": "code"
    },
    {
      "title": "Sending Data to a Channel",
      "content": "To send data into a channel, use the `<-` operator. Here is an example:\n\n```go\nch <- 42 // Sends 42 to the channel\n```\nThe sending operation will block if the channel is full (in case of buffered channels), until space is available.",
      "slide_type": "code"
    },
    {
      "title": "Receiving Data from a Channel",
      "content": "To receive data from a channel, you also use the `<-` operator. Here's an example:\n\n```go\nvalue := <-ch // Receives data from the channel\n```\nThe receiving operation will block if the channel is empty, until data is available.",
      "slide_type": "code"
    },
    {
      "title": "Buffered vs Unbuffered Channels",
      "content": "Channels can be either buffered or unbuffered:\n\n- **Unbuffered Channel**: Data is transferred immediately between goroutines, causing blocking.\n- **Buffered Channel**: Data can be buffered, meaning it doesn't block until the buffer is full.\n\nYou choose which type based on your communication needs between goroutines.",
      "slide_type": "text"
    },
    {
      "title": "Closing a Channel",
      "content": "A channel can be closed to indicate no more data will be sent on it. This is done using the `close` function:\n\n```go\nclose(ch)\n```\nAfter closing a channel, no more values can be sent, but it can still be received from. A closed channel will return the zero value for its type.",
      "slide_type": "code"
    },
    {
      "title": "Channel Direction",
      "content": "You can restrict the direction of channel use in Go, meaning that a channel can be used for **sending only** or **receiving only**. This is useful for clarity in function signatures:\n\n```go\nfunc sendData(ch chan<- int) { ch <- 42 }  // Send only\nfunc receiveData(ch <-chan int) { value := <-ch }  // Receive only\n```",
      "slide_type": "code"
    },
    {
      "title": "Channel Select Statement",
      "content": "The `select` statement allows you to wait on multiple channels simultaneously. It's like a `switch`, but for channels.\n\nHere's a basic example:\n\n```go\nselect {\ncase msg1 := <-ch1:\n    fmt.Println(\"Received from ch1:\", msg1)\ncase msg2 := <-ch2:\n    fmt.Println(\"Received from ch2:\", msg2)\n}\n```\n`select` will block until one of the channels is ready.",
      "slide_type": "code"
    },
    {
      "title": "Quick Challenge: Test Your Understanding",
      "content": "### Test your understanding of channels in Go!\n\n1. How do you create a buffered channel in Go?\n2. What happens when you try to receive from an empty unbuffered channel?\n3. How can you send data into a channel?\n4. What is the purpose of the `select` statement when working with channels?",
      "slide_type": "text"
    },
    {
      "title": "Solutions: Quick Challenge",
      "content": "### Answers:\n\n1. **Creating a Buffered Channel:**\n   ```go\n   ch := make(chan int, 2)  // Creates a buffered channel with a buffer size of 2\n   ```\n\n2. **Receiving from an Empty Unbuffered Channel:**\n   The receiving goroutine will block until data is available.\n\n3. **Sending Data to a Channel:**\n   ```go\n   ch <- 42  // Sends the value 42 to the channel\n   ```\n\n4. **The `select` Statement:**\n   The `select` statement is used to wait on multiple channels, blocking until one of them is ready to perform a send or receive.",
      "slide_type": "code"
    }
  ]
  