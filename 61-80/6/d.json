[
    {
      "title": "What is a Channel in Go?",
      "content": "In Go, a channel is a way to communicate between goroutines, allowing data to be passed safely. Channels can be buffered or unbuffered, and they provide synchronization between the sender and receiver.",
      "slide_type": "text"
    },
    {
      "title": "Understanding Channel States",
      "content": "A channel in Go can be in one of two states:\n\n- Open: The channel is ready to send or receive data.\n- Closed: The channel has been closed, and no more data can be sent, but data can still be received if any is available.",
      "slide_type": "text"
    },
    {
      "title": "What Happens When You Send to a Closed Channel?",
      "content": "Sending data to a closed channel causes a runtime panic. This means the program will stop execution, and an error will be shown, indicating that you are trying to send to a closed channel.",
      "slide_type": "text"
    },
    {
      "title": "Example: Sending to a Closed Channel",
      "content": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    ch := make(chan int)\n    close(ch)\n    ch <- 42  // This will cause a panic\n}\n```",
      "slide_type": "code"
    },
    {
      "title": "Common Causes of Sending to a Closed Channel",
      "content": "- A goroutine sends to a channel after it has been closed.\n- Improper channel management, such as closing a channel prematurely.\n- Lack of synchronization between goroutines.",
      "slide_type": "text"
    },
    {
      "title": "How to Avoid Sending to a Closed Channel?",
      "content": "To avoid sending to a closed channel, always check if the channel is open. Use the `ok` variable to determine if a channel is still open after receiving from it.\n\nExample: `value, ok := <-ch` where `ok` is `false` if the channel is closed.",
      "slide_type": "text"
    },
    {
      "title": "Handling Closed Channels Gracefully",
      "content": "One way to handle closed channels safely is by using a `select` statement to check if the channel is open before sending data to it. This way, the program doesn't panic if the channel is closed.\n\nExample: Use a `select` with a default case to check for closed channels.",
      "slide_type": "text"
    },
    {
      "title": "Example: Safe Channel Send with Select",
      "content": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    ch := make(chan int)\n    go func() {\n        ch <- 42\n        close(ch)\n    }()\n\n    select {\n    case msg := <-ch:\n        fmt.Println(msg)\n    default:\n        fmt.Println(\"Channel is closed or empty\")\n    }\n}\n```",
      "slide_type": "code"
    },
    {
      "title": "Key Takeaways",
      "content": "- Sending to a closed channel causes a runtime panic.\n- Always ensure channels are not closed before sending data.\n- Use `ok` to check if a channel is open when receiving from it.\n- Use `select` to handle closed channels gracefully.",
      "slide_type": "text"
    },
    {
      "title": "Quick Challenge: Test Your Understanding",
      "content": "- What happens when you try to send to a closed channel in Go?\n- How can you safely check if a channel is open before sending data?\n- What Go construct can you use to handle closed channels without causing a panic?",
      "slide_type": "text"
    },
    {
      "title": "Solutions: Quick Challenge",
      "content": "1. **Sending to a closed channel** will cause a runtime panic in Go.\n\n2. To **check if a channel is open**, you can use `value, ok := <-ch` where `ok` is `false` if the channel is closed.\n\n3. To **handle closed channels safely**, you can use a `select` statement, allowing you to check if the channel is closed without causing a panic.",
      "slide_type": "code"
    }
  ]
  