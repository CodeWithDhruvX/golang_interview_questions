zI want you to:
1. Generate 10 viral YouTube Shorts ideas that are focused on following interview Q&A, pitfalls, or coding challenges. Each idea must have:


A killer hook in the first 3 seconds.
A clear structure for 30‚Äì60 seconds (problem > solution > quick tip).
A call-to-action (like comment, share, or watch next).programming langage name added.
2. Suggest 5 click-worthy titles and thumbnails for each idea (SEO + curiosity-based).

3. Provide 1 full 30-second script for the highest potential idea.

4. Optimize retention: ensure fast pacing, pattern interrupts, and rewatch loops.

5. Suggest the best posting time strategy and hashtags to test for maximum reach.
6. Add the programming lanuage name
7. please give me the question only relvant programming langauge


1. What are pointers in Go?
2. How do you declare and use pointers?
3. What is the difference between pointer and value receivers?
4. What are methods in Go?

===========================================================================

You are an expert software engineer (10+ years) and a YouTube Shorts content creator.  
Transform the following list of technical interview video ideas into a JSON array of objects for engaging short-form coding videos.

{
  "snippets": [
    {
      "title": "<short, catchy title (3‚Äì5 words)>",
      "code": "<programming language name as a comment at the top. Then write 'Problem:' with a short, self-contained code snippet in this language only (optional comments). Next, write 'Solution:' with fully runnable code in the same language, 20‚Äì25 sec reading, minimal inline comments (1‚Äì3 words), highlight pitfalls with 'Expected vs Actual' when relevant, and always end with '// Output: ...'>",
      "hook": "<1-line attention-grabbing hook (challenge, curiosity, or common mistake)>"
    }
  ]
}

üìú Rules for the code & content:
- Use **only one programming language per snippet**. Do not compare or mix with other languages.
- Language comment must follow the language‚Äôs syntax (e.g., `# Python`, `// JavaScript`, `/* Java */`).
- Keep snippets short, clear, and interview-relevant.
- Problem should show a pitfall, incomplete code, or a challenge to spark curiosity.
- Solution must fix it fully in the same language in a simple, satisfying way.
- Hook must make the viewer curious to watch until the solution.
- Format with proper indentation and escape quotes for JSON.
- Tone: punchy, fast-paced, visually engaging for YouTube Shorts.


========================================================

generate 10 more without repeating concepts and code give me the code

========================================================

please give me the problem and solution statement through another code snippet by differentiate output both output same so what's the difference that i can't shopw in the output.give two seperate code snippet in a single file with the problem and solution statement

============================================================================


Your task:  
Generate a structured JSON array where each object contains the following fields:

1. videoFile: Absolute file path of the video (example: "C:/Users/YourName/Videos/<topic>.mp4").  
2. title: An SEO-optimized title (‚â§100 chars) starting with "<programming language name> Interview Q<n>:" (increment number starting from the given Q number) + catchy hook + emojis.  
3. description: YouTube-optimized description (around 500‚Äì1000 chars) including:  
   - Attention-grabbing intro based on the English hook  
   - 3‚Äì5 bullet points describing the video content  
   - Relevant hashtags at the end  
4. tags: An array of relevant YouTube tags (keywords).  
5. categoryName: Always "Education".  
6. privacyStatus: "public".  
7. thumbnail: Absolute file path of the thumbnail image (example: "C:/Users/YourName/Videos/thumbnails/<topic>.png").  
8. playlistName: An array of playlist names where this video belongs (example: ["Golang Interview Q&A", "Go Arrays & Slices Explained"]).  
9. publishAt: Scheduled date & time in "YYYY-MM-DD HH:MM:SS" format (auto-increment 2 day per video).  
10. madeForKids: false.  
11. ageRestriction: false.

‚úÖ Rules:  
- If type is "Short", make the description concise & hook-driven.  
- If type is "Long-form", include more depth in the description and mention it's a complete guide.  
- Include emojis in titles & descriptions for engagement.  
- Use hashtags that are SEO-friendly for coding interviews and the Go programming language.  
- Increment Q number sequentially for each video in the order given.  
- Keep titles ‚â§100 characters but still catchy.

Output format:  
Return **only** the JSON array inside a fenced JSON code block like this:

```json
[
  {
    "videoFile": "C:/Users/YourName/Videos/example.mp4",
    "title": "Go Interview Q21: üöÄ Example Title Here",
    "description": "Example description here...",
    "tags": ["golang", "go interview", "arrays", "slices"],
    "categoryName": "Education",
    "privacyStatus": "public",
    "thumbnail": "C:/Users/YourName/Videos/thumbnails/example.png",
    "playlistName": ["Golang Interview Q&A"],
    "publishAt": "2025-08-08 10:00:00",
    "madeForKids": false,
    "ageRestriction": false
  }
]

============================================================

You are a YouTube scriptwriter who creates engaging, beginner-friendly programming explainer videos.

I will give you a JSON object containing multiple programming code objects. 
Each snippet has:
- "title": a short video title
- "code": a complete code example
- "hook": a short, intriguing sentence

Your task:
For EACH snippet in the JSON:
1. Create a **1.5‚Äì3 minute YouTube script** explaining the code to beginners in an engaging way.
2. Structure each script into the following sections:
   - **Opening Hook (0:00‚Äì0:10)** ‚Äî expand the given hook into a punchy, curiosity-driven intro that grabs attention.
   - **Concept Explanation (0:10‚Äì0:40)** ‚Äî explain what the concept is and why it matters.
   - **Code Walkthrough (0:40‚Äì1:20)** ‚Äî go through the provided code line by line, explaining what each part does.
   - **Why It‚Äôs Useful (1:20‚Äì2:10)** ‚Äî explain practical applications, real-world use cases, or common scenarios.
   - **Outro (2:10‚Äì2:30)** ‚Äî end with a question to encourage comments, and a call to like & subscribe for more content.
3. Maintain technical accuracy while making it easy to follow for beginners.
4. Add stage directions in parentheses when helpful, e.g., ‚Äú(show code on screen)‚Äù, ‚Äú(zoom on output)‚Äù.
5. Keep a friendly, confident tone ‚Äî educational but lively.
6. create the youtube script max 3 code snippet then moving to the next three one.
7. Add **pauses and rhythm** where needed ‚Äî use [pause] to show natural breaks.
8. Topic title must folllow with numberic number. topic_name and don't add any icons in title


Now here is the JSON:



