import os
from langchain.agents import initialize_agent, Tool
from langchain.llms import OpenAI
from langchain.agents.agent_types import AgentType
from dotenv import load_dotenv

load_dotenv()

# Step 1: Define the meeting booking function (simulated backend)
def book_meeting(date: str, time: str, participant: str) -> str:
    return f"üìÖ Meeting booked with {participant} on {date} at {time}."

# Step 2: Define a wrapper that parses natural language into arguments
def booking_tool(input_text: str) -> str:
    """
    A simple parser that extracts time, date, and participant from input text.
    (In production, use a better parser like LLM or dateparser)
    """
    # For demo purposes, this is hardcoded. You should replace it with actual NLP or LLM parsing.
    # Assume fixed format: "Schedule a meeting with NAME on DATE at TIME"
    import re
    match = re.search(r"with ([\w\s]+) (on|for) (\w+day) at ([\d:apm\s]+)", input_text, re.IGNORECASE)
    if not match:
        return "‚ùå Could not parse meeting info."
    
    participant = match.group(1).strip()
    date = match.group(3).strip()
    time = match.group(4).strip()
    return book_meeting(date, time, participant)

# Step 3: Register the tool for the agent
tools = [
    Tool(
        name="MeetingScheduler",
        func=booking_tool,
        description="Schedules a meeting given a natural language input like 'Schedule meeting with John on Friday at 2pm.'",
    )
]

# Step 4: Initialize the LLM and agent
llm = OpenAI(temperature=0)

agent = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True,
)

# Step 5: Test the agent
response = agent.run("Please schedule a meeting with Alice for Thursday at 10am.")
print(response)






‚úÖ Tone and Style Guidelines:

Use spoken-style English, like you're casually explaining something to a friend or junior developer.

Keep the language simple, friendly, and natural.

Use relatable examples (especially ones an Indian beginner would connect with, like classroom explanations, job interviews, or real coding tasks).

Avoid complicated words or phrases that sound too formal or western.

Don‚Äôt use any Hindi or Hinglish ‚Äî keep it 100% English, but Indian-friendly.

Maintain a teacher-like tone, as if guiding someone new to programming.

üéØ Instructions:

Start with the first script:

Read the title and content and explain what it means.

Use simple, real-life or beginner-level programming examples.

Highlight why this topic matters, especially in real-world coding scenarios.

üìò For code slides:

Explain the code line by line.

Mention what each part does in a clear and practical way.

Help beginners avoid common mistakes.

üìä For table slides:

Walk through each row and column clearly.

Compare values or concepts simply.

Help the viewer understand how to use this information in actual development work.

‚úçÔ∏è For text slides:

Only explain the theory part.

Do not include any code.

‚õî Rules:

youtbe scipt include intro or outro.

Do not explain multiple slides at once ‚Äî only one script per explanation.

Assume the viewer is new to Topic and programming.

