[
    {
      "title": "Introduction to defer",
      "content": "In Go, `defer` is used to schedule a function call to run after the surrounding function completes. It is commonly used for cleanup tasks like closing files or unlocking mutexes.",
      "slide_type": "text"
    },
    {
      "title": "Defer with named return value",
      "content": "When using **named return values**, deferred functions can modify the result **before** it is returned.",
      "slide_type": "text"
    },
    {
      "title": "Example: Named return value with defer",
      "content": "```go\nfunc getNumber() (result int) {\n    defer func() {\n        result += 1\n    }()\n    return 5\n}\n```",
      "slide_type": "code"
    },
    {
      "title": "Explanation of named return defer",
      "content": "- `result` is declared as a named return value.\n- `defer` modifies `result` **after** `return 5` but **before** the function exits.\n- Final return value becomes `6`.",
      "slide_type": "text"
    },
    {
      "title": "Defer with unnamed return value",
      "content": "If no named return value is used, deferred functions **cannot** change the returned value directly.",
      "slide_type": "text"
    },
    {
      "title": "Example: Unnamed return value with defer",
      "content": "```go\nfunc getNumber() int {\n    result := 5\n    defer func() {\n        result += 1\n    }()\n    return result\n}\n```",
      "slide_type": "code"
    },
    {
      "title": "Result of unnamed return value",
      "content": "- Return value is `5`, not `6`.\n- `defer` updates `result`, but the returned value is evaluated **before** `defer` runs.",
      "slide_type": "text"
    },
    {
      "title": "Defer with pointer return",
      "content": "```go\nfunc getPointer() (p *int) {\n    result := 5\n    defer func() {\n        result++\n    }()\n    p = &result\n    return\n}\n```",
      "slide_type": "code"
    },
    {
      "title": "Effect of defer on pointer return",
      "content": "- The pointer `p` points to `result`.\n- `defer` runs after setting the pointer.\n- So the returned value pointed to by `p` is updated to `6`.",
      "slide_type": "text"
    },
    {
      "title": "Defer and return timing summary",
      "content": [
        { "case": "Named return variable", "effect": "Can be modified by defer" },
        { "case": "Unnamed return variable", "effect": "Value copied before defer runs" },
        { "case": "Pointer return", "effect": "Can affect what the pointer points to" }
      ],
      "slide_type": "table"
    }
  ]
  
✅ FINAL YOUTUBE SCRIPT PROMPT (Hook-Driven + Retention-Boosting + Beginner-Friendly)

🔊 TONE & STYLE — TALK LIKE A FRIENDLY MENTOR
- Use spoken-style English — imagine you're explaining this to a junior in college or someone prepping for interviews.
- Keep it super simple, natural, and clear — avoid jargons or textbook words.
- Use relatable Indian examples (coding rounds, college viva, app building, freelance projects).
- No Hinglish. Keep it 100% English, but make it *feel Indian-friendly* — like explaining over chai or in a canteen.
- Always assume the viewer is *hearing this for the first time*.

---

🎬 INTRO SLIDE (Hook + Clear Promise)
🎙 Use this for the **very first slide** of the video:

1. Start with a **hook or relatable pain point**:

2. Make a **clear promise**:
   - “By the end of this video, you’ll understand [topic] clearly, see 3 real code examples, and know where it’s used in real-world apps.”

3. Keep the tone energetic, inviting, and under **15–20 seconds**.

---

📽️ SLIDE-WISE SCRIPT STRUCTURE

👉 FOR **TEXT / THEORY SLIDES**  
(Concept explanation, definitions, bullet points)

🎙 Format:
- Read the slide title.
- Explain the idea like you're teaching a confused beginner in a classroom.
- Break down key terms in plain English.
- Use real-life analogies (e.g., “Think of this like how you… in a Zomato app…”).
- Show how this concept is useful in:
  - Coding interviews
  - Real-world projects
  - Debugging or architecture

📌 End with:
> “This sounds basic, but it's actually a building block for a lot of advanced topics — especially when you're working on real apps.”

---

👉 FOR **CODE SLIDES**  
(Code snippets, walkthroughs, demos)

🎙 Format:
- Read the slide/snippet title.
- Go **line by line**, explaining what each part does.
- Avoid reading the code word-for-word — instead, explain the **intention** behind each part.
- Use phrases like:
  - “Here we’re creating a function that...”
  - “This line connects to the DB and checks if...”
- Relate to real-world examples:
  - “This is exactly how login validation works in a MERN app.”
  - “In a freelance project, you'd use this to format form data before submission.”

🚩 Bonus:
- Point out 1 common beginner mistake or confusion here — and clarify it.

📌 End with:
> “You’ll see this pattern again and again in interviews and projects — so make sure this part is crystal clear.”

---

👉 FOR **TABLE SLIDES**  
(Comparisons, pros & cons, differences)

🎙 Format:
- Introduce the table and what it compares.
- Go **row by row**, breaking down each comparison.
- Explain which choice is better *and when*:
  - “If you care about speed, choose X. But if you want flexibility, go with Y.”
- Add real use cases:
  - “In startups, they usually pick this because...”
  - “In product-based companies, this helps during scaling...”

📌 End with:
> “Don’t memorize — understand the ‘why’ behind each difference. That’s what interviewers really care about.”

---

🎬 OUTRO SLIDE (Recap + Retention Trigger)
🎙 Use this for the **final slide** of the video:

1. **Quick recap** of what they just learned:
   - “So now you understand what [topic] is, how it works, and how to use it in real-world code.”

2. **Trigger curiosity** for the next video:
   - “In the next video, we’ll build a real feature using this — like an actual signup system.”

3. **Reassure and encourage**:
   - “If you understood this, you’re already ahead of most beginners. Keep going — you’re doing great!”

---

⚠️ IMPORTANT RULES (Apply to All Slides)
- No robotic tone — speak naturally, like you're mentoring someone 1-on-1.
- No unnecessary intros or outros outside of the first/last slide.
- Don’t assume prior knowledge — explain everything like it’s Day 1.
- End each slide with a **clear takeaway**.
- Keep your energy up — your confidence = their attention.

---

🎯 GOAL: 
Make your viewer feel like:
> “Now I *finally* get it... and I can actually use this in real code.”


