[
  {
    "title": "🚀 The Go Append Trick You Didn't Know!",
    "content": "**Most beginners think** `append` just adds to a slice.\n\nBut… it can **also remove items** without loops! 😲\n\nThink of it like a **Lego set** — you can attach or remove blocks anytime.",
    "slide_type": "text"
  },
  {
    "title": "💡 Normal Append (Easy)",
    "content": "```go\nnums := []int{1, 2, 3}\nnums = append(nums, 4) // add 4\nfmt.Println(nums)\n// [1 2 3 4]\n```",
    "slide_type": "code"
  },
  {
    "title": "⚡ Remove Without Loops?!",
    "content": "```go\nnums := []int{1, 2, 3, 4, 5}\n// Remove 3rd element (index 2)\nnums = append(nums[:2], nums[3:]...)\nfmt.Println(nums)\n// [1 2 4 5]\n```",
    "slide_type": "code"
  },
  {
    "title": "🧠 Why This Works",
    "content": "- `nums[:2]` → slice before the item\n- `nums[3:]` → slice after the item\n- `append(a, b...)` → joins both, skipping the middle\n\nNo loops. No extra array. Just **slice magic**.",
    "slide_type": "text"
  },
  {
    "title": "🔥 Next Up",
    "content": "Want to know **how Go secretly resizes slices** when appending? 📏\n\nThat trick will **blow your mind** 🤯",
    "slide_type": "text"
  }
]





